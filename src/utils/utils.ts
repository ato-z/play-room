import { mkdirSync, accessSync} from 'fs'

const bedeckEm = ['可笑', '空中', '香喷喷', '关门', '桃红', '秀美', '少见', '日用', '所有', '土黄', '用功', '大气', '不定', '知足', '可怜', '可心', '刻苦', '朝阳', '清白', '友爱', '刚好', '老大', '和气', '可以', '绿色', '黄色', '正好', '可能', '金黄', '草本', '永久', '冷清', '不合', '公办', '晴朗', '平安', '平常', '平淡', '漂亮', '暖和', '怕人', '平和', '平静', '齐全', '奇妙', '认真', '日常', '正常', '真实', '真正', '次要','真实', '真正', '认真', '日常', '芳香', '知名', '直接', '飞快', '非常', '鲜红', '鲜艳', '相同', '辛苦', '喜欢', '细心', '野生', '业余', '一定', '明白', '明亮', '迷人', '自然', '能干', '老实', '乐观', '凉快', '理想', '冷淡', '礼貌', '可爱', '经常', '洁净', '进步', '和好', '空洞', '空旷', '快活', '快乐', '过时', '害怕', '合法', '合格', '洪亮', '后来', '专心', '专业', '专一', '原来', '原始', '远大', '火热', '齐全', '奇妙', '主动', '主要', '众多', '重要', '热情', '热心', '柔软', '开心', '美好', '美丽', '闷热', '精彩', '久远', '欢乐', '痛苦', '繁忙', '雪白', '秀丽', '许久', '可以', '本来', '笔直', '白净', '齐心', '不行', '草绿', '吃力', '出名', '长远', '低级', '低下', '潮湿', '晴朗', '暖和', '怕人', '亲爱', '平和', '平静', '平安', '平常', '平淡', '漂亮', '中用', '黄花', '金灿灿', '可笑', '土黄', '桃红', '所有', '多余', '吃力', '出名', '亲爱', '齐心', '中用', '不快', '着急', '全', '结实', '同', '明', '短', '帅', '少', '双', '荒', '家', '草', '笑', '清新', '鲜美', '多', '到', '白', '黄', '皮', '早', '广', '亮', '男', '活', '近', '足', '和', '是', '成', '黑', '平', '右', '长', '尖', '生', '女', '正', '土', '老', '久', '头', '公', '乐']
const nounEm = ['花', '海', '夜晚', '样子', '乡土', '莲', '力', '高', '桃', '问', '毛', '门', '向', '用', '一', '大家', '车辆', '春风', '轮船', '晚上', '法宝', '关口', '邮局', '地点', '背景', '乡亲', '家乡', '王国', '性别', '天才', '空间', '气象', '空想', '跟前', '课文', '黑白', '朝阳', '情谊', '众', '办法', '北斗星', '对方', '风雨', '爱人', '回声', '牧童', '晚年', '田园', '家长', '青年', '字', '中', '儿童', '苦力', '萝卜', '粗细', '黄瓜', '爷爷', '游船', '春天', '虫牙', '火光', '秋天', '天气', '人群', '弯度', '正午', '头巾', '满怀', '叶片', '远近', '难题', '门票', '太岁', '女士', '孩子', '君王', '法力', '兰花', '雨伞', '老师', '深山', '画笔', '幼虫', '山羊', '水珠', '夜猫子', '女儿', '月光', '早操', '蚊子', '女孩', '小队', '扇贝', '一点', '一起', '月牙', '水面', '日用', '车把', '上午', '美景', '日光', '乐队', '所有', '什么', '姨妈', '瓢虫', '明日', '桥洞', '手心', '知了', '人们', '儿女', '间谍', '报道', '晚会', '景色', '来回', '男儿', '颗粒', '房间', '左右', '工业', '午睡', '处方', '长度', '原理', '文本', '点子', '家园', '大师', '元旦', '人生', '远古', '起点', '空气', '长短', '对面', '教练', '姐夫', '过往', '后门', '童心', '电影', '苦水', '冰霜', '一向', '感情', '春色', '样品', '创意', '老大', '发言', '口才', '夜色', '新春', '往后', '梅子', '相知', '家门', '地方', '帮手', '人气', '军火', '认识', '活水', '往常', '会议', '用品', '大小', '以后', '草本', '校友', '等级', '化石', '价格', '后方', '大话', '民情', '壁虎', '力气', '本土', '风云', '工程师', '今天', '反光', '救星', '朝霞', '答案', '先生', '父母', '贝壳', '高见', '能手', '知己', '行人', '布衣', '黄色', '角落', '护照', '公子', '做工', '耳目', '先后', '竹子', '面子', '国画', '小吃', '牛皮', '和气', '公园', '净土', '迷宫', '广场', '京城', '语言', '白话', '丁香', '抹布', '故事', '乐园', '边境', '土豆', '美人', '男子汉', '彩色', '妈妈', '万一', '种子', '冷暖', '姐妹', '摇篮', '道路', '早晚', '比方', '林海', '小说', '物体', '可能', '班级', '绿色', '花车', '天地', '童年', '对子', '园丁', '光亮', '光明', '广播', '规定', '故乡', '表现', '古代', '过错', '群体', '以前', '广告', '音乐', '成语', '眼睛', '明星', '灰尘', '去年', '恩情', '短处', '队列', '对比', '对话', '对手', '安全', '动力', '处分', '大方', '清晨', '深情', '时机', '时间', '市场', '声音', '少数', '平地', '同学', '题目', '说明', '思想', '水平', '岁月', '旁边', '友人', '远方', '彩', '高手', '下级', '两旁', '包', '贝', '礼物', '里面', '黑夜', '风格', '行动', '行为', '夕阳', '影响', '友好', '友谊', '问题', '用处', '用心', '优点', '习惯', '文化', '工作', '高低', '刚才', '落日', '根本', '工厂', '大道', '本子', '诗人', '门口', '球门', '星星', '明年', '作文', '围巾', '屋子', '男子', '父子', '二老', '皮尺', '户口', '云朵', '姐姐', '空中']
/**
 * 返回一个随机的昵称
 * ```
 * randomName() // 空中的门
 * randomName() // 酱紫的黄瓜
 * ```
 */
export const randomName = (): string => {
    const em1 = bedeckEm[~~(bedeckEm.length * Math.random())]
    const em2 = nounEm[~~(nounEm.length * Math.random())]
    return em1 + '的' + em2
}

/**
 * 个位数填充0
 * @param {number} n 需要检验的字符
 * @returns 转化后的字符
 * ```
 * fillZero(1) // => 01
 * fillZero(10) // => 10
 * ```
 */
export const fillZero = (n: string|number): string => {
    n = n.toString()
    if (n.length > 1) { return n.toString() }
    return '0' + n
}

/**
 * 特定格式时间字符串转实际时间
 * @param {string} dateString 需要格式的字符串，如: Y年m月d日 h时m分s秒
 * @param {Date}   _date        new Date()
 * @returns 格式化后的字符串: y-m-d H:i:s => 2022-02-02 10:00:00
 * ```
 * const datatime = date('Y年m月d日 h时m分s秒', new Date()) // => 2021年01月05日 10时10分10秒
 * ```
*/
export const date = function (dateString: string, _date?: Date): string {
    const reg = /[y|m|d|h|i|s]/ig
    _date ? (_date instanceof Date || (_date = new Date(_date))) : (_date = new Date())
    dateString = dateString.replace(reg,  (val): string => {
        val = val.toUpperCase()
        if (val === 'Y') { return _date!.getFullYear().toString() }
        if (val === 'M') { return fillZero(_date!.getMonth() + 1) }
        if (val === 'D') { return fillZero(_date!.getDate()) }
        if (val === 'H') { return fillZero(_date!.getHours()) }
        if (val === 'I') { return fillZero(_date!.getMinutes()) }
        if (val === 'S') { return fillZero(_date!.getSeconds()) }
        return ''
    })
    return dateString
}

/**
 * 判断路径是否存在，不存在则创建
 * @param path {string} 路径地址
 * ```
 * const path = '/a/b/c'
 * touchPath(path)
 * ```
 */
export const touchPath = (path: string): void => {
    const diffPath: string[] = []
    const decodePath: string[] = path.split('\/')
    const popHandle = () => {
        try {
            let currentPath: string =  decodePath.join('\/')
            if (decodePath.length) { accessSync(currentPath) }
        } catch(err) {
            const diff = decodePath.pop() as string
            diffPath.push(diff)
            popHandle()
        }
    }
    popHandle()
    while (diffPath.length) {
        const nextDir = diffPath.pop() as string
        decodePath.push(nextDir)
        const currentPath: string = decodePath.join('\/')
        mkdirSync(currentPath)
    }
}